相似类设计模式

1.策略模式&桥梁模式
  桥梁模式含有某一个抽象父类，这个抽象父类含有另一个类对象的引用，这样抽象类的子类可以通过  super.类对象的引用  来实现两个类的沟通
  策略模式的目的是封装独立算法，桥梁模式是在不破坏封装的前提下解决抽象和实现都可以独立扩展的模式。
  桥梁模式必然有两个“桥墩”——抽象化角色和实现化角色，只要桥墩搭建好，桥就有了，而策略模式只有一个抽象角色，可以没有实现，也可以有很多实现


2.门面模式&中介者模式
门面模式是以封装和隔离为主要任务，比如只通过某一个类获取工资情况，不对外公布具体的计算细节
而中介者模式则是以调和同事类之间的关系为主，因为要调和，各子模块不进行交互，通过中介者类进行交互。比如通过调节出勤类、基本工资类、绩效类等计算出具体的总工资数

3.包装模式：装饰模式、适配器模式、门面模式、代理模 式、桥梁模式

代理模式主要用在不希望展示一个对象内部细节的场景中，比如一个远程服务不需要把远程连接的所有细节都暴露给外部模块，通过增加一个代理类，可以很轻松地实现被代理类的功能封装。此外，代理模式还可以用在一个对象的访问需要限制的场景中，比如AOP。
装饰模式是一种特殊的代理模式，它倡导的是在不改变接口的前提下为对象增强功能， 或者动态添加额外职责。就扩展性而言，它比子类更加灵活，例如在一个已经运行的项目 中，可以很轻松地通过增加装饰类来扩展系统的功能。
适配器模式的主要意图是接口转换，把一个对象的接口转换成系统希望的另外一个接 口，这里的系统指的不仅仅是一个应用，也可能是某个环境，比如通过接口转换可以屏蔽外 界接口，以免外界接口深入系统内部，从而提高系统的稳定性和可靠性。
桥梁模式是在抽象层产生耦合，解决的是自行扩展的问题，它可以使两个有耦合关系的 对象互不影响地扩展，比如对于使用笔画图这样的需求，可以采用桥梁模式设计成用什么笔 （铅笔、毛笔）画什么图（圆形、方形）的方案，至于以后需求的变更，如增加笔的类型， 增加图形等，对该设计来说是小菜一碟。
门面模式是一个粗粒度的封装，它提供一个方便访问子系统的接口，不具有任何的业务 逻辑，仅仅是一个访问复杂系统的快速通道，没有它，子系统照样运行，有了它，只是更方 便访问而已